{"version":3,"sources":["mapaGuia.PNG","logo.svg","components/mapaLink/mapa-link.js","components/cidade/cidade.js","main.js","components/header/header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MapaLink","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","area","name","areas","shape","coords","href","largura","Math","round","window","innerWidth","altura","innerHeight","console","log","props","history","push","concat","_this2","react_default","a","createElement","className","id","style","marginTop","ImageMapper_default","src","roteiro","map","onClick","clicked","Component","Cidade","cidade","cidadeId","match","params","setState","Main","marginLeft","marginRight","react_router","exact","path","component","Header","closeMenuClick","bind","assertThisInitialized","document","getElementById","display","zIndex","width","fontWeight","fontSize","openMenuClick","cursor","title","App","header","main","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","react_router_dom","src_App","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4b4905d1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mapaGuia.d78c3486.PNG\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\r\nimport React, {Component} from \"react\";\r\nimport ImageMapper from 'react-image-mapper';\r\nimport roteiro from '../../mapaGuia.PNG'\r\nimport './mapa-link.css';\r\n\r\nclass MapaLink extends Component{\r\n\r\n    constructor(){\r\n\r\n        super();\r\n\r\n        let area = { \r\n            name: 'teste', \r\n            areas :[\r\n             {name : '1',shape: 'rect',coords: [213,380,287,444],href: '/cidade',},\r\n             {name : '2',shape: 'rect',coords: [76,417,158,491],href: '/cidade'},\r\n             {name : '3',shape: 'rect',coords: [93,40,193,95],href: '/cidade'}\r\n          ]\r\n         };\r\n\r\n        this.state = {\r\n            area: area,\r\n            largura: Math.round(window.innerWidth * 0.90),\r\n            altura: Math.round(window.innerHeight * 0.85)\r\n        }\r\n    }\r\n\r\n    clicked(area){\r\n        console.log('Area',area);\r\n\r\n        this.props.history.push(`/cidade/${area.name}`);\r\n    }\r\n\r\n    render(){\r\n\r\n        return <div className=\"w3-container\" id=\"novoCliente\" style={{ marginTop: '75px' }}>\r\n                        <div>\r\n                            <ImageMapper \r\n                                    src={roteiro} \r\n                                    map={this.state.area}\r\n                                    // width={this.state.largura}\r\n                                    // height={this.state.altura}\r\n                                    \r\n                                    onClick={area => this.clicked(area)}>\r\n                                </ImageMapper>\r\n                       </div>\r\n                        \r\n                {/* <img src={roteiro} alt=\"Lights\" class=\"w3-image\" width=\"100%\" ></img> */}\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default MapaLink","\r\nimport React, {Component} from \"react\";\r\n\r\n\r\nclass Cidade extends Component{\r\n\r\n  constructor(){\r\n      super();\r\n\r\n      this.state = {\r\n          cidade: 'vazio'\r\n      }\r\n  }\r\n\r\n  render(){\r\n\r\n    return <div className=\"w3-container\" id=\"novoCliente\" style={{ marginTop: '75px' }}>\r\n        <h3>{this.state.cidade}</h3>\r\n    </div>\r\n  }\r\n\r\n  componentDidMount () {\r\n    const { cidadeId } = this.props.match.params\r\n\r\n     if (cidadeId === \"1\"){\r\n        this.setState({\r\n            cidade: 'Tiradentes'\r\n        });\r\n     }else{\r\n        if (cidadeId === \"2\"){\r\n            this.setState({\r\n                cidade: 'São João Del Rey'\r\n            });\r\n         }else{\r\n            this.setState({\r\n                cidade: 'Resende Costa'\r\n            });\r\n         }   \r\n     }\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default Cidade;","import React, {Component} from \"react\";\r\n\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\n\r\nimport MapaLink from \"./components/mapaLink/mapa-link\";\r\nimport Cidade from \"./components/cidade/cidade\";\r\n\r\nclass Main extends Component\r\n{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        \r\n\r\n    }\r\n\r\n    componentDidMount(){ \r\n\r\n    }\r\n\r\n    \r\n\r\n\r\n    render(){\r\n\r\n        return <div className=\"w3-main\" style={{marginLeft:'340px', marginRight:'75px'}}>  \r\n                   \r\n                    \r\n                   <Switch>\r\n                        <Route exact path=\"/\" component={MapaLink}/>\r\n                        <Route path=\"/cidade/:cidadeId\" component={Cidade}/>\r\n                        \r\n                        <Route component={MapaLink}/>\r\n                    </Switch>\r\n\r\n                    \r\n               </div>\r\n\r\n    }\r\n}\r\n\r\nexport default Main","\r\nimport React, {Component} from \"react\";\r\n\r\nclass Header extends Component{\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.closeMenuClick = this.closeMenuClick.bind(this);\r\n        this.closeMenuClick = this.closeMenuClick.bind(this);        \r\n    } \r\n\r\n    openMenuClick(){\r\n        document.getElementById(\"mySidebar\").style.display = \"block\";\r\n        document.getElementById(\"myOverlay\").style.display = \"block\";\r\n    }\r\n\r\n    closeMenuClick(){\r\n        document.getElementById(\"mySidebar\").style.display = \"none\";\r\n        document.getElementById(\"myOverlay\").style.display = \"none\";\r\n    }\r\n\r\n    render(){\r\n\r\n        return <div>\r\n            <nav className=\"w3-sidebar w3-red w3-collapse w3-top w3-large w3-padding\" style={{zIndex:'3', width:'300px', fontWeight:'bold'}} id=\"mySidebar\">\r\n                <a href=\"javascript:void(0)\" onClick={this.closeMenuClick} className=\"w3-button w3-hide-large w3-display-topleft\" \r\n                    style={{width:'100%', fontSize: '22px'}}>Fechar Menu</a>\r\n\r\n                <div className=\"w3-container\">\r\n                    <h3 className=\"w3-padding-64\"><b>Guia Das Vertentes</b></h3>\r\n                </div>\r\n\r\n                <div className=\"w3-bar-block\">\r\n                </div>\r\n            </nav>     \r\n                    \r\n            <header className=\"w3-container w3-top w3-hide-large w3-red w3-xlarge w3-padding\">\r\n                <a href=\"javascript:void(0)\" className=\"w3-button w3-red w3-margin-right\" onClick={this.openMenuClick}>☰</a>\r\n                <span className=\"w3-opacity\" id=\"tituloView\">Guia Das Vertentes</span>\r\n            </header>\r\n\r\n            <div className=\"w3-overlay w3-hide-large\" onClick={this.closeMenuClick} style={{cursor:'pointer'}} title=\"close side menu\" id=\"myOverlay\"></div>\r\n        </div>\r\n    }\r\n\r\n}\r\n\r\nexport default Header;","import React from 'react';\nimport logo from './logo.svg';\n\n\nimport './App.css';\nimport Main from './main';\nimport Header from './components/header/header';\n\n\nfunction App() {\n\n   \n\n\n  return (\n    <div >\n      <Header/>\n      <Main/>\n\n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter, HashRouter } from 'react-router-dom';\n\nReactDOM.render(<HashRouter>\n    <App />\n</HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}